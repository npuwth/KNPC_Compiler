
// Generated from SysY.g4 by ANTLR 4.10.1


#include "SysYLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct SysYLexerStaticData final {
  SysYLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  SysYLexerStaticData(const SysYLexerStaticData&) = delete;
  SysYLexerStaticData(SysYLexerStaticData&&) = delete;
  SysYLexerStaticData& operator=(const SysYLexerStaticData&) = delete;
  SysYLexerStaticData& operator=(SysYLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

std::once_flag sysylexerLexerOnceFlag;
SysYLexerStaticData *sysylexerLexerStaticData = nullptr;

void sysylexerLexerInitialize() {
  assert(sysylexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<SysYLexerStaticData>(
    std::vector<std::string>{
      "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
      "T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
      "T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "WhiteSpace", 
      "LineComment", "BlockComment", "Void", "Int", "Float", "Const", "If", 
      "Else", "While", "Break", "Continue", "Return", "Decimal", "Octal", 
      "Hexadecimal", "FloatLiteral", "Identifier"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "';'", "','", "'='", "'{'", "'}'", "'['", "']'", "'('", "')'", 
      "'+'", "'-'", "'!'", "'*'", "'/'", "'%'", "'<'", "'>'", "'<='", "'>='", 
      "'=='", "'!='", "'&&'", "'||'", "", "", "", "'void'", "'int'", "'float'", 
      "'const'", "'if'", "'else'", "'while'", "'break'", "'continue'", "'return'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "WhiteSpace", "LineComment", "BlockComment", 
      "Void", "Int", "Float", "Const", "If", "Else", "While", "Break", "Continue", 
      "Return", "Decimal", "Octal", "Hexadecimal", "FloatLiteral", "Identifier"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,41,286,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,1,0,1,0,1,1,1,
  	1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,
  	1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,
  	1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,
  	1,22,1,22,1,22,1,23,4,23,137,8,23,11,23,12,23,138,1,23,1,23,1,24,1,24,
  	1,24,1,24,5,24,147,8,24,10,24,12,24,150,9,24,1,24,3,24,153,8,24,1,24,
  	1,24,3,24,157,8,24,1,24,1,24,1,25,1,25,1,25,1,25,5,25,165,8,25,10,25,
  	12,25,168,9,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,27,
  	1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,
  	1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,
  	1,32,1,33,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
  	1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,36,1,36,5,36,234,8,36,
  	10,36,12,36,237,9,36,1,37,1,37,5,37,241,8,37,10,37,12,37,244,9,37,1,38,
  	1,38,1,38,4,38,249,8,38,11,38,12,38,250,1,39,5,39,254,8,39,10,39,12,39,
  	257,9,39,1,39,1,39,5,39,261,8,39,10,39,12,39,264,9,39,1,39,1,39,3,39,
  	268,8,39,1,39,4,39,271,8,39,11,39,12,39,272,3,39,275,8,39,1,39,3,39,278,
  	8,39,1,40,1,40,5,40,282,8,40,10,40,12,40,285,9,40,1,166,0,41,1,1,3,2,
  	5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,
  	16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,
  	55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,
  	39,79,40,81,41,1,0,13,3,0,9,10,13,13,32,32,2,0,10,10,13,13,1,0,49,57,
  	1,0,48,57,1,0,48,48,1,0,48,55,2,0,88,88,120,120,3,0,48,57,65,70,97,102,
  	3,0,69,69,101,101,124,124,3,0,43,43,45,45,124,124,3,0,70,70,102,102,124,
  	124,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,300,0,1,1,0,0,
  	0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,
  	0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,
  	0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,
  	35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,
  	0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,
  	0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,
  	67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,
  	0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,1,83,1,0,0,0,3,85,1,0,0,0,5,87,1,0,0,
  	0,7,89,1,0,0,0,9,91,1,0,0,0,11,93,1,0,0,0,13,95,1,0,0,0,15,97,1,0,0,0,
  	17,99,1,0,0,0,19,101,1,0,0,0,21,103,1,0,0,0,23,105,1,0,0,0,25,107,1,0,
  	0,0,27,109,1,0,0,0,29,111,1,0,0,0,31,113,1,0,0,0,33,115,1,0,0,0,35,117,
  	1,0,0,0,37,120,1,0,0,0,39,123,1,0,0,0,41,126,1,0,0,0,43,129,1,0,0,0,45,
  	132,1,0,0,0,47,136,1,0,0,0,49,142,1,0,0,0,51,160,1,0,0,0,53,174,1,0,0,
  	0,55,179,1,0,0,0,57,183,1,0,0,0,59,189,1,0,0,0,61,195,1,0,0,0,63,198,
  	1,0,0,0,65,203,1,0,0,0,67,209,1,0,0,0,69,215,1,0,0,0,71,224,1,0,0,0,73,
  	231,1,0,0,0,75,238,1,0,0,0,77,245,1,0,0,0,79,255,1,0,0,0,81,279,1,0,0,
  	0,83,84,5,59,0,0,84,2,1,0,0,0,85,86,5,44,0,0,86,4,1,0,0,0,87,88,5,61,
  	0,0,88,6,1,0,0,0,89,90,5,123,0,0,90,8,1,0,0,0,91,92,5,125,0,0,92,10,1,
  	0,0,0,93,94,5,91,0,0,94,12,1,0,0,0,95,96,5,93,0,0,96,14,1,0,0,0,97,98,
  	5,40,0,0,98,16,1,0,0,0,99,100,5,41,0,0,100,18,1,0,0,0,101,102,5,43,0,
  	0,102,20,1,0,0,0,103,104,5,45,0,0,104,22,1,0,0,0,105,106,5,33,0,0,106,
  	24,1,0,0,0,107,108,5,42,0,0,108,26,1,0,0,0,109,110,5,47,0,0,110,28,1,
  	0,0,0,111,112,5,37,0,0,112,30,1,0,0,0,113,114,5,60,0,0,114,32,1,0,0,0,
  	115,116,5,62,0,0,116,34,1,0,0,0,117,118,5,60,0,0,118,119,5,61,0,0,119,
  	36,1,0,0,0,120,121,5,62,0,0,121,122,5,61,0,0,122,38,1,0,0,0,123,124,5,
  	61,0,0,124,125,5,61,0,0,125,40,1,0,0,0,126,127,5,33,0,0,127,128,5,61,
  	0,0,128,42,1,0,0,0,129,130,5,38,0,0,130,131,5,38,0,0,131,44,1,0,0,0,132,
  	133,5,124,0,0,133,134,5,124,0,0,134,46,1,0,0,0,135,137,7,0,0,0,136,135,
  	1,0,0,0,137,138,1,0,0,0,138,136,1,0,0,0,138,139,1,0,0,0,139,140,1,0,0,
  	0,140,141,6,23,0,0,141,48,1,0,0,0,142,143,5,47,0,0,143,144,5,47,0,0,144,
  	148,1,0,0,0,145,147,8,1,0,0,146,145,1,0,0,0,147,150,1,0,0,0,148,146,1,
  	0,0,0,148,149,1,0,0,0,149,156,1,0,0,0,150,148,1,0,0,0,151,153,5,13,0,
  	0,152,151,1,0,0,0,152,153,1,0,0,0,153,154,1,0,0,0,154,157,5,10,0,0,155,
  	157,5,0,0,1,156,152,1,0,0,0,156,155,1,0,0,0,157,158,1,0,0,0,158,159,6,
  	24,0,0,159,50,1,0,0,0,160,161,5,47,0,0,161,162,5,42,0,0,162,166,1,0,0,
  	0,163,165,9,0,0,0,164,163,1,0,0,0,165,168,1,0,0,0,166,167,1,0,0,0,166,
  	164,1,0,0,0,167,169,1,0,0,0,168,166,1,0,0,0,169,170,5,42,0,0,170,171,
  	5,47,0,0,171,172,1,0,0,0,172,173,6,25,0,0,173,52,1,0,0,0,174,175,5,118,
  	0,0,175,176,5,111,0,0,176,177,5,105,0,0,177,178,5,100,0,0,178,54,1,0,
  	0,0,179,180,5,105,0,0,180,181,5,110,0,0,181,182,5,116,0,0,182,56,1,0,
  	0,0,183,184,5,102,0,0,184,185,5,108,0,0,185,186,5,111,0,0,186,187,5,97,
  	0,0,187,188,5,116,0,0,188,58,1,0,0,0,189,190,5,99,0,0,190,191,5,111,0,
  	0,191,192,5,110,0,0,192,193,5,115,0,0,193,194,5,116,0,0,194,60,1,0,0,
  	0,195,196,5,105,0,0,196,197,5,102,0,0,197,62,1,0,0,0,198,199,5,101,0,
  	0,199,200,5,108,0,0,200,201,5,115,0,0,201,202,5,101,0,0,202,64,1,0,0,
  	0,203,204,5,119,0,0,204,205,5,104,0,0,205,206,5,105,0,0,206,207,5,108,
  	0,0,207,208,5,101,0,0,208,66,1,0,0,0,209,210,5,98,0,0,210,211,5,114,0,
  	0,211,212,5,101,0,0,212,213,5,97,0,0,213,214,5,107,0,0,214,68,1,0,0,0,
  	215,216,5,99,0,0,216,217,5,111,0,0,217,218,5,110,0,0,218,219,5,116,0,
  	0,219,220,5,105,0,0,220,221,5,110,0,0,221,222,5,117,0,0,222,223,5,101,
  	0,0,223,70,1,0,0,0,224,225,5,114,0,0,225,226,5,101,0,0,226,227,5,116,
  	0,0,227,228,5,117,0,0,228,229,5,114,0,0,229,230,5,110,0,0,230,72,1,0,
  	0,0,231,235,7,2,0,0,232,234,7,3,0,0,233,232,1,0,0,0,234,237,1,0,0,0,235,
  	233,1,0,0,0,235,236,1,0,0,0,236,74,1,0,0,0,237,235,1,0,0,0,238,242,7,
  	4,0,0,239,241,7,5,0,0,240,239,1,0,0,0,241,244,1,0,0,0,242,240,1,0,0,0,
  	242,243,1,0,0,0,243,76,1,0,0,0,244,242,1,0,0,0,245,246,7,4,0,0,246,248,
  	7,6,0,0,247,249,7,7,0,0,248,247,1,0,0,0,249,250,1,0,0,0,250,248,1,0,0,
  	0,250,251,1,0,0,0,251,78,1,0,0,0,252,254,7,3,0,0,253,252,1,0,0,0,254,
  	257,1,0,0,0,255,253,1,0,0,0,255,256,1,0,0,0,256,258,1,0,0,0,257,255,1,
  	0,0,0,258,262,5,46,0,0,259,261,7,3,0,0,260,259,1,0,0,0,261,264,1,0,0,
  	0,262,260,1,0,0,0,262,263,1,0,0,0,263,274,1,0,0,0,264,262,1,0,0,0,265,
  	267,7,8,0,0,266,268,7,9,0,0,267,266,1,0,0,0,267,268,1,0,0,0,268,270,1,
  	0,0,0,269,271,7,3,0,0,270,269,1,0,0,0,271,272,1,0,0,0,272,270,1,0,0,0,
  	272,273,1,0,0,0,273,275,1,0,0,0,274,265,1,0,0,0,274,275,1,0,0,0,275,277,
  	1,0,0,0,276,278,7,10,0,0,277,276,1,0,0,0,277,278,1,0,0,0,278,80,1,0,0,
  	0,279,283,7,11,0,0,280,282,7,12,0,0,281,280,1,0,0,0,282,285,1,0,0,0,283,
  	281,1,0,0,0,283,284,1,0,0,0,284,82,1,0,0,0,285,283,1,0,0,0,16,0,138,148,
  	152,156,166,235,242,250,255,262,267,272,274,277,283,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  sysylexerLexerStaticData = staticData.release();
}

}

SysYLexer::SysYLexer(CharStream *input) : Lexer(input) {
  SysYLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *sysylexerLexerStaticData->atn, sysylexerLexerStaticData->decisionToDFA, sysylexerLexerStaticData->sharedContextCache);
}

SysYLexer::~SysYLexer() {
  delete _interpreter;
}

std::string SysYLexer::getGrammarFileName() const {
  return "SysY.g4";
}

const std::vector<std::string>& SysYLexer::getRuleNames() const {
  return sysylexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& SysYLexer::getChannelNames() const {
  return sysylexerLexerStaticData->channelNames;
}

const std::vector<std::string>& SysYLexer::getModeNames() const {
  return sysylexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& SysYLexer::getVocabulary() const {
  return sysylexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView SysYLexer::getSerializedATN() const {
  return sysylexerLexerStaticData->serializedATN;
}

const atn::ATN& SysYLexer::getATN() const {
  return *sysylexerLexerStaticData->atn;
}




void SysYLexer::initialize() {
  std::call_once(sysylexerLexerOnceFlag, sysylexerLexerInitialize);
}
